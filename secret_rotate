stages:
  - deploy

deploy_to_openshift:
  stage: deploy
  script:
    - echo "Starting deployment to OpenShift..."
    
    # Decode the Docker auth config from the CI/CD variable
    - echo "$DOCKER_AUTH_CONFIG" | base64 --decode > docker_config.json

    # Patch the secret with the new Docker auth config file
    - |
      # Name of the OpenShift secret and namespace
      secret_name="my-docker-secret"
      namespace="my-namespace"

      # Check if the namespace exists
      oc get namespace "$namespace" &>/dev/null
      if [ $? -eq 0 ]; then
          echo "Namespace '$namespace' exists."

          # Check if the secret exists in the namespace
          oc get secret "$secret_name" -n "$namespace" &>/dev/null
          if [ $? -eq 0 ]; then
              echo "Secret '$secret_name' exists in namespace '$namespace'. Patching the secret with new Docker auth config..."

              # Patch the secret with the new Docker config
              oc patch secret "$secret_name" -n "$namespace" --patch "{\"data\":{\".dockerconfigjson\":\"$(cat docker_config.json | base64 | tr -d '\n')\"}}"

              if [ $? -eq 0 ]; then
                  echo "Secret '$secret_name' patched successfully in namespace '$namespace'."
              else
                  echo "Failed to patch secret '$secret_name' in namespace '$namespace'."
              fi
          else
              echo "Secret '$secret_name' does not exist in namespace '$namespace'. Creating new secret..."

              # Create the secret using the Docker config file
              oc create secret docker-registry "$secret_name" --docker-server=<docker-registry-url> --docker-username=<docker-username> --docker-password=<docker-password> --docker-email=<docker-email> -n "$namespace"

              if [ $? -eq 0 ]; then
                  echo "Secret '$secret_name' created successfully in namespace '$namespace'."
              else
                  echo "Failed to create secret '$secret_name' in namespace '$namespace'."
              fi
          fi
      else
          echo "Namespace '$namespace' does not exist."
      fi

      echo "------------------------"
    
    # Clean up the decoded Docker config file after patching
    - rm -f docker_config.json

  only:
    - main  # or specify the branch you want to deploy to



------------------------

stages:
  - deploy

deploy_to_openshift:
  stage: deploy
  script:
    - echo "Starting deployment to OpenShift..."

    # Decode the Docker auth config from the CI/CD variable
    - echo "$DOCKER_AUTH_CONFIG" | base64 --decode > docker_config.json

    # List of namespaces and associated secrets (You can define them as CI/CD variables)
    - |
      declare -A namespaces_and_secrets
      namespaces_and_secrets=(
          ["$NAMESPACE_1"]="$SECRET_1"
          ["$NAMESPACE_2"]="$SECRET_2"
      )

      # Loop through the namespaces and their associated secrets
      for namespace in "${!namespaces_and_secrets[@]}"; do
          secret_name="${namespaces_and_secrets[$namespace]}"  # Get the associated secret for the namespace
          echo "Checking namespace: $namespace with secret: $secret_name"

          # Check if the namespace exists
          oc get namespace "$namespace" &>/dev/null
          if [ $? -eq 0 ]; then
              echo "Namespace '$namespace' exists."

              # Check if the secret exists in the namespace
              oc get secret "$secret_name" -n "$namespace" &>/dev/null
              if [ $? -eq 0 ]; then
                  echo "Secret '$secret_name' exists in namespace '$namespace'. Patching the secret with new Docker auth config..."

                  # Patch the secret with the new Docker config
                  oc patch secret "$secret_name" -n "$namespace" --patch "{\"data\":{\".dockerconfigjson\":\"$(cat docker_config.json | base64 | tr -d '\n')\"}}"

                  if [ $? -eq 0 ]; then
                      echo "Secret '$secret_name' patched successfully in namespace '$namespace'."
                  else
                      echo "Failed to patch secret '$secret_name' in namespace '$namespace'."
                  fi
              else
                  echo "Secret '$secret_name' does not exist in namespace '$namespace'. Creating new secret..."

                  # Create the secret using the Docker config file
                  oc create secret docker-registry "$secret_name" --docker-server=<docker-registry-url> --docker-username=<docker-username> --docker-password=<docker-password> --docker-email=<docker-email> -n "$namespace"

                  if [ $? -eq 0 ]; then
                      echo "Secret '$secret_name' created successfully in namespace '$namespace'."
                  else
                      echo "Failed to create secret '$secret_name' in namespace '$namespace'."
                  fi
              fi
          else
              echo "Namespace '$namespace' does not exist."
          fi

          echo "------------------------"
    
    # Clean up the decoded Docker config file after patching
    - rm -f docker_config.json

  only:
    - main  # or specify the branch you want to deploy to
