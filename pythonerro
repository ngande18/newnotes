    send_to_apps = os.environ.get("SEND_TO_APPS")
    
    if send_to_apps is None:
        print("SEND_TO_APPS is not set.")
    else:
        print(f"SEND_TO_APPS is set to: {send_to_apps}")

def generateContainerStats(self, containers):
    report = {}
    print("Aqua: generateContainerStats")
    for c in containers:
        if c.get('detailed_vulnerabilities') is None:
            # Skip this container if no vulnerabilities are found
            continue
        if c['namespace_name'] not in report:
            report[c['namespace_name']] = {
                'Vulnerabilities': [],
                'Base Image': c.get('base_image', 'Unknown Base Image')  # Default value if not found
            }

        for v in c['detailed_vulnerabilities']:
            newvuln = {}
            container_link = f'https://aqua.apps.ose{self.region}.mtb.com/#/workloads/{c["ihost_id"]}/{c["iid"]}/{c["iname"]}/risk'
            image_name = v.get('image_name', 'Unknown Image')  # Default value if not found
            newvuln['Container'] = f'=HYPERLINK("{container_link}", "{image_name}")'
            newvuln['Vulnerability'] = v.get('name', 'No Name')  # Default value if not found
            newvuln['Severity'] = v.get('aqua_severity', 'Unknown Severity')  # Default value if not found
            newvuln['Date Found'] = v.get('first_found_date', 'N/A')  # Default value if not found
            newvuln['Publish Date'] = v.get('publish_date', 'N/A')  # Default value if not found
            newvuln['Modification Date'] = v.get('modification_date', 'N/A')  # Default value if not found
            newvuln['Fix Version'] = v.get('fix_version', 'N/A')  # Default value if not found
            newvuln['Description'] = v.get('description', 'No Description')  # Default value if not found
            newvuln['Compliant'] = "Yes" if c.get('compliant') else "No"

            report[c['namespace_name']]['Vulnerabilities'].append(newvuln)
    
    return report







Aqua: generateContainerStats
Traceback (most recent call last):
  File "/builds/Platforms/openshift/aqs-vuln-report/app.py", line 448, in <module>
    main()
  File "/builds/Platforms/openshift/aqs-vuln-report/app.py", line 374, in main
    report = a.generateContainerStats(containers)
  File "/builds/Platforms/openshift/aqs-vuln-report/app.py", line 231, in generateContainerStats
    newvuln['Description'] = v['description']
KeyError: 'description'

def main():
    if os.environ.get("SEND_TO_APPS"):
        proj_dir = os.environ.get("CI_PROJECT_DIR")
        app_codes = get_app_codes(dest_filename)
        
        # Dictionary to hold app codes and their corresponding emails
        email_mapping = {}
        no_email_codes = []  # List to hold app codes with no emails

        for app_code in app_codes:
            print("Working on App Code Report for: ", app_code)
            toAddr = get_app_code_to_mail(app_code).split(",")

            # Store email addresses in the mapping
            email_mapping[app_code] = toAddr
            
            # Check if no email addresses were found
            if not toAddr[0]:  # Check if the first element is an empty string
                no_email_codes.append(app_code)  # Add to no_email_codes list
                continue

            segmented_report = segment_app_code_from_report(dest_filename, app_code)
            subject = f"OpenShift report for {app_code}"
            body = ""
            with open(proj_dir + "/TO_email_body.html", "r") as f:
                body += f"{f.read()}".format(date=date.today(), app_code=app_code)
            fromAddr = "dl-kubernetes@prod.mtb.com"
            CC = get_app_code_ts_mails(app_code).split(",")
            email_files = [segmented_report]
            emailxlsx(email_files, subject, body, fromAddr, toAddr, CC)

        # Print the final list of app codes with their email addresses
        print("\nApp Codes and their Email Addresses:")
        for app_code, emails in email_mapping.items():
            print(f"{app_code}: {', '.join(emails)}")

        # Print app codes with no emails found
        if no_email_codes:
            print("\nApp Codes with No Email Addresses Found:")
            for code in no_email_codes:
                print(code)

    # Disabled so that files can be uploaded as artifacts
    # cleanxlsx()



import requests

def get_app_code_to_mail(app_code):
    try:
        print(f"Fetching email for app code: {app_code}")
        response = requests.get(f"https://appcodelookup.apps.XXXX.XXXXX.com/ac/{app_code}", verify=False)
        response.raise_for_status()  # Raise an error for bad responses
        info = response.json()

        print(f"Result info: {info}")  # Log the response

        if not info.get("result"):
            print(f"No email found for app code: {app_code}")
            return ""  # Return an empty string instead of raising an error

        return info["result"][0]["toemail"]
    
    except requests.exceptions.RequestException as e:
        print(f"Error fetching email for app code {app_code}: {e}")
        return ""  # Return an empty string on request failure
    except Exception as e:
        print(f"Unexpected error for app code {app_code}: {e}")
        return ""  # Return an empty string for unexpected errors


def main():
    if os.environ.get("SEND_TO_APPS"):
        proj_dir = os.environ.get("CI_PROJECT_DIR")
        app_codes = get_app_codes(dest_filename)
        for app_code in app_codes:
            print("Working on App Code Report for: ", app_code)
            toAddr = get_app_code_to_mail(app_code).split(",")

            # Skip processing if no email addresses are found
            if not toAddr[0]:  # Check if the first element is an empty string
                continue

            segmented_report = segment_app_code_from_report(dest_filename, app_code)
            subject = f"OpenShift report for {app_code}"
            body = ""
            with open(proj_dir + "/TO_email_body.html", "r") as f:
                body += f"{f.read()}".format(date=date.today(), app_code=app_code)
            fromAddr = "dl-kubernetes@prod.mtb.com"
            CC = get_app_code_ts_mails(app_code).split(",")
            email_files = [segmented_report]
            emailxlsx(email_files, subject, body, fromAddr, toAddr, CC)

    # Disabled so that files can be uploaded as artifacts
    # cleanxlsx()

    sys.exit()

main()






    if os.environ.get("SEND_TO_APPS"):
        proj_dir = os.environ.get("CI_PROJECT_DIR")
        app_codes = get_app_codes(dest_filename)
        for app_code in app_codes:
            print("Working on App Code Report for: ", app_code)
            try:
                toAddr = get_app_code_to_mail(app_code).split(",")
            except ValueError as ve:
                print(ve)  # Log the error message
                continue  # Skip to the next app code if no email is found
            
            # Proceed with segmenting the report only if email is found
            segmented_report = segment_app_code_from_report(dest_filename, app_code)
            subject = f"OpenShift report for {app_code}"
            body = ""
            with open(proj_dir + "/TO_email_body.html", "r") as f:
                body += f"{f.read()}".format(date=date.today(), app_code=app_code)
            fromAddr = "dl-kubernetes@prod.mtb.com"
            CC = get_app_code_ts_mails(app_code).split(",")
            email_files = [segmented_report]
            emailxlsx(email_files, subject, body, fromAddr, toAddr, CC)

    # Disabled so that files can be uploaded as artifacts
    # cleanxlsx()



Working on App Code Report for:  aqu
No email found for app code: aqu
Traceback (most recent call last):
  File "/builds/Platforms/openshift/aqs-vuln-report/app.py", line 418, in <module>
    main()
  File "/builds/Platforms/openshift/aqs-vuln-report/app.py", line 408, in main
    toAddr = get_app_code_to_mail(app_code).split(",")
  File "/builds/Platforms/openshift/aqs-vuln-report/app.py", line 320, in get_app_code_to_mail
    raise ValueError(f"No email found for app code: {app_code}")
ValueError: No email found for app code: aqu
Cleaning up project directory and file based variables




import requests

def get_app_code_to_mail(app_code):
    try:
        print(f"Fetching email for app code: {app_code}")
        response = requests.get(f"https://appcodelookup.apps.XXXX.XXXXX.com/ac/{app_code}", verify=False)
        response.raise_for_status()  # Raise an error for bad responses
        info = response.json()

        print(f"Result info: {info}")  # Log the response

        if not info.get("result"):
            raise ValueError(f"No email found for app code: {app_code}")

        return info["result"][0]["toemail"]
    
    except requests.exceptions.RequestException as e:
        print(f"Error fetching email for app code {app_code}: {e}")
        raise
    except ValueError as ve:
        print(ve)
        raise
    except Exception as e:
        print(f"Unexpected error for app code {app_code}: {e}")
        raise






import requests

def get_app_code_to_mail(app_code):
    try:
        response = requests.get(f"https://appcodelookup.apps.XXXX.XXXXX.com/ac/{app_code}", verify=False)
        response.raise_for_status()  # Raise an error for bad responses
        info = response.json()

        if not info.get("result"):
            raise ValueError(f"No email found for app code: {app_code}")

        return info["result"][0]["toemail"]
    
    except requests.exceptions.RequestException as e:
        print(f"Error fetching email for app code {app_code}: {e}")
        raise
    except ValueError as ve:
        print(ve)
        raise
    except Exception as e:
        print(f"Unexpected error for app code {app_code}: {e}")
        raise



#! /usr/bin/env /usr/bin/python3
# Generates a report of vulnerabilities in Aqua
# Requires Python 3.6 or above

import requests, ssl, json, os, sys, re, csv
import smtplib
import pandas as pd
from glob import glob
# noinspection PyInterpreter
from urllib.parse import quote_plus
from openpyxl import Workbook, load_workbook
from getpass import getpass
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from datetime import date
requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

class Aqua:
    # Calling the aqua class creates a token to be used for all other methods
    def __init__(self, login, password, region):
        self.region = region
        self.urlv1 = f'https://aqua.apps.ose{region}.mtb.com/api/v1'
        self.urlv2 = f'https://aqua.apps.ose{region}.mtb.com/api/v2'
        print("Aqua: logging in to " + str(region))

        self.auth = {
            "id": login,
            "password": password
        }

        try:
            self.login = requests.post(f'{self.urlv1}/login',
            json=self.auth,
            verify=False)
            self.login.raise_for_status()
        except requests.exceptions.HTTPError as err:
            raise SystemExit(err)
        
        self.data = self.login.json()
        self.headers = {'Authorization': 'Bearer ' + self.data['token']}
    
    # This generates a list of running containers
    def getRunningContainers(self):
        page = 1
        pagesize = 50
        count = 0
        containers = []
        print("Aqua: getting running containers")
        while True:
            try:
                r_containers = requests.get(f'{self.urlv2}/containers?groupby=containers&status=running&page={page}&pagesize={pagesize}',
                headers=self.headers,
                verify=False)
                r_containers.raise_for_status()
            except requests.exceptions.HTTPError as err:
                raise SystemExit(err)
            results = r_containers.json()
            pagecount = results['count']
            containers += results['result']
            page += 1
            count += pagesize
            if count >= pagecount:
                break
        return containers
    
    def getRegisteredImages(self):
        page = 1
        pagesize = 50
        count = 0
        images = []
        print("Aqua: getting registered images")
        while True:
            try:
                r_images = requests.get(f'{self.urlv2}/images?page={page}&pagesize={pagesize}',
                headers=self.headers,
                verify=False)
                r_images.raise_for_status()
            except requests.exceptions.HTTPError as err:
                raise SystemExit(err)
            results = r_images.json()
            pagecount = results['count']
            images += results['result']
            page += 1
            count += pagesize
            if count >= pagecount:
                break
        return images
    
    def removeDuplicateImages(self, images):
        new_images = []
        print("Aqua: removing duplicate images")
        for i in images:
            if i not in new_images:
                new_images.append(i)
        return new_images

    def addNamespace(self, containers, images):
        new_images = []
        print("Aqua: addNamespace")
        for c in containers:
            for i in images:
                if f'{i["name"]}' in f'{c["origin_image_name"]}':
                    i['namespace_name'] = c['namespace_name']
                    i['compliant'] = c['image_assurance_compliant']
                    i["ihost_id"] = c["host_id"]
                    i["iid"] = c["id"]
                    i["iname"] = c["name"]
                    new_images.append(i)
                    break
        return new_images

    def addVulnsToImage(self, images):
        page = 1
        pagesize = 100
        print("Aqua: addVulnsToImage")
        for count, i in enumerate(images):
            print(str(count) + "/" + str(len(images)) + "\r", end='', flush=True)
            i["detailed_vulnerabilities"] = []
            try:
                image = quote_plus(i['name'])
                registry = quote_plus(i['registry'])
                r_vulns = requests.get(f'{self.urlv2}/risks/vulnerabilities?page={page}&pagesize={pagesize}&image_name={image}&registry_name={registry}',
                headers=self.headers,
                verify=False)
                r_vulns.raise_for_status()
            except requests.exceptions.HTTPError as err:
                raise SystemExit(err)
            results = r_vulns.json()
            i['detailed_vulnerabilities'] = results['result']
        return images
    
    def addBaseImage(self, images):
        print("Aqua: add base image")
        for count, i in enumerate(images):
            print(str(count) + "/" + str(len(images)) + "\r", end='', flush=True)
            name = i['name']
            try:
                # https://docs.aquasec.com/v6.5/reference#get-specific-image
                r_base = requests.get(f'{self.urlv2}/images/{i["registry"]}/{i["repository"]}/{i["tag"]}',
                headers=self.headers,
                verify=False)
                r_base.raise_for_status()
            except requests.exceptions.HTTPError as err:
                raise SystemExit(err)
            results = r_base.json()
            try:
                i['base_image'] = results['parent']['name']
            except:
                i['base_image'] = ""
        return images
    
    def getCatalogImages(self, images):
        print("Aqua: get catalog image")
        catalog_images = [x for x in images if x['name'].split('/')[0] == 'mtb-docker-ga']
        return catalog_images

    def generateImageStats(self, images):
        report = {}
        print("Aqua: get catalog image")
        for i in images:
            image_name = i['name']
            if i['detailed_vulnerabilities'] == None:
                report[image_name] = {}
                report[image_name]['Tag'] = i['tag']
                report[image_name]['Vulnerabilities'] = []
                newvuln = {}
                newvuln['Vulnerability'] = 'N/A'
                newvuln['Severity'] = ''
                newvuln['Date Found'] = ''
                newvuln['Fix Version'] = ''
                newvuln['Description'] = ''
                report[image_name]['Vulnerabilities'].append(newvuln)
            else:
                report[image_name] = {}
                report[image_name]['Tag'] = i['tag']
                report[image_name]['Vulnerabilities'] = []
                for v in i['detailed_vulnerabilities']:
                    newvuln = {}
                    newvuln['Vulnerability'] = v['name']
                    newvuln['Severity'] = v['aqua_severity']
                    newvuln['Date Found'] = v['first_found_date']
                    newvuln['Fix Version'] = v['fix_version']
                    newvuln['Description'] = v['description']
                    report[image_name]['Vulnerabilities'].append(newvuln)
        return report

    def generateImageReport(self, image_report, output_filename):
        print("Aqua: generateImageReport")
        dest_catalog_filename = output_filename
        wb = Workbook()
        ws = wb.active
        ws.title = 'Catalog'
        row = 0
        titles = ['Image', 'Tag', 'Vulnerability', 'Severity', 'Date Found', 'Fix Version', 'Description']
        ws.append(titles)
        for r in image_report:
            for v in image_report[r]['Vulnerabilities']:
                values = [r, image_report[r]['Tag'], v['Vulnerability'], v['Severity'], v['Date Found'], v['Fix Version'], v['Description']]
                ws.append(values)
        wb.save(filename = dest_catalog_filename)

    # Generates a dict for easy processing of vulnerabilities. Includes a summary of the vulns per each namespace.
    def generateContainerStats(self, containers):
        report = {}
        print("Aqua: generateContainerStats")
        for c in containers:
            if c['detailed_vulnerabilities'] == None:
                # Skip this container if no vulnerabilities are found
                continue
            if c['namespace_name'] not in report:
                report[c['namespace_name']] = {}
                report[c['namespace_name']]['Vulnerabilities'] = []
                report[c['namespace_name']]['Base Image'] = c['base_image']

            for v in c['detailed_vulnerabilities']:
                newvuln = {}
                container_link = f'https://aqua.apps.ose{self.region}.mtb.com/#/workloads/{c["ihost_id"]}/{c["iid"]}/{c["iname"]}/risk'
                image_name = v['image_name']
                newvuln['Container'] = f'=HYPERLINK("{container_link}", "{image_name}")'
                newvuln['Vulnerability'] = v['name']
                newvuln['Severity'] = v['aqua_severity']
                newvuln['Date Found'] = v['first_found_date']
                newvuln['Publish Date'] = v['publish_date']
                newvuln['Modification Date'] = v['modification_date']
                newvuln['Fix Version'] = v['fix_version']
                newvuln['Description'] = v['description']
                newvuln['Compliant'] = "Yes" if c['compliant'] == True else "No"
                report[c['namespace_name']]['Vulnerabilities'].append(newvuln)
        return report

    # Generates a spreadsheet based on the stats created in generateRunningStats
    def generateContainerReport(self, container_report, dest_filename):
        wb = Workbook()
        ws = wb.active
        ws.title = 'Vulns'
        row = 0
        titles = ['Namespace', 'Region', 'Container', 'Base Image', 'Vulnerability', 'Severity', 'Date Found', 'Publish Date', 'Modification Date', 'Fix Version', 'Compliant', 'Description']
        ws.append(titles)
        print("Aqua: generateContainerReport")
        for r in container_report:
            for v in container_report[r]['Vulnerabilities']:
                values = [r, f'ose{self.region}', v['Container'], container_report[r]['Base Image'],
                v['Vulnerability'], v['Severity'], v['Date Found'], v['Publish Date'], v['Modification Date'], v['Fix Version'], v['Compliant'], v['Description']]
                ws.append(values)
        wb.save(filename = dest_filename)

def mergexlsx(files, dest_filename):
    print("merging files to " + str(dest_filename))
    df = pd.DataFrame()
    df_unique = pd.DataFrame()
    for file in files:
        wb = load_workbook(file)
        ws = wb.active
        df = df.append(pd.DataFrame(ws.values))
    # Just in case duplicates got missed somehow
    df_unique = df.drop_duplicates()
    df_unique.to_excel(dest_filename, index=False, header=False)


def emailxlsx(filenames, subject, body, fromAddr, toAddr, CC):
    print("Emailing")
    print("    subject: " + str(subject))
    print("    fromAddr: " + str(fromAddr))
    print("    toAddr: " + str(toAddr))
    print("    CC: " + str(CC))

    # Create a multipart message and set headers
    message = MIMEMultipart()
    message["From"] = fromAddr
    message["To"] = ', '.join(toAddr)
    message["Subject"] = subject
    message["CC"] = ', '.join(CC)

    # Add body to email
    message.attach(MIMEText(body, "html"))
    for filename in filenames:
        print("    Filename: " + filename, " -- " + str(os.path.getsize(filename)/1000) + " KB")
        attachment = MIMEApplication(open(filename, 'rb').read())
        attachment.add_header('Content-Disposition', 'attachment', filename=filename)
        message.attach(attachment)
    print()

    # combine all people to send to
    toAddrs = set( toAddr + CC )

    try:
        mail = smtplib.SMTP('vmwsmtp.mandtbank.com',25)
        mail.sendmail(fromAddr, toAddrs, message.as_string())
    except SMTPException as e:
        print(f'There was a problem sending the mail: {e}')
        sys.exit(1)

    mail.quit()

def cleanxlsx():
    print("cleanxlsx")
    files = glob('./*.xlsx')
    for file in files:
        os.remove(file)

# Get the app codes from running report
# Get the app code's TO using api call from app code lookup
# Segmenting the running report based on app code
# Send email on behalf of vulnerability DL
# Seperate the running report into segmented reports to send to TOs

# Get app code's TO email
def get_app_code_to_mail(app_code):
    info = requests.get("https://appcodelookup.apps.oseprod.mtb.com/ac/" + app_code, verify=False).json()
    return info["result"][0]["toemail"]

def get_app_code_ts_mails(app_code):
    info = requests.get("https://appcodelookup.apps.oseprod.mtb.com/ac/" + app_code, verify=False).json()
    return info["result"][0]["tsemail"]

# Get app code from running report xlsx file
def get_app_codes(running_report):
    df = pd.DataFrame()
    df = df.append(pd.read_excel(running_report, engine='openpyxl'))
    namespaces = df["Namespace"].values
    # Remove duplicate app codes by using a set
    app_codes = [*set(map(lambda x: x[:3], namespaces))]
    return app_codes

# Input running report, will segment into new file appended with app code
def segment_app_code_from_report(running_report, app_code):
    wb = load_workbook(running_report)
    ws = wb.active
    data = ws.values
    columns = next(data)[0:]
    df = pd.DataFrame(data, columns=columns)
    df = df[df["Namespace"].str.startswith(app_code)]
    new_running_report = f"aqua_running_report_{app_code}.xlsx"
    df.to_excel(new_running_report, index=False)
    return new_running_report

def main():
    try:
        login = os.environ['AQS_USER']
        password = os.environ['AQS_PASS']
    except:
        login = input('Login: ')
        password = getpass(prompt='Password: ', stream=None)
    #regions = ['dev', 'cert', 'extcert', 'prod', 'ext', 'proddr', 'extdr']
    #regions = ['cert', 'extcert', 'prod', 'ext', 'proddr', 'extdr']
    regions = []
    if os.environ.get("REP_ENVS") is not None:
        regions = [x.strip() for x in os.environ.get("REP_ENVS").split(',')]
    else:
        regions = ['dev', 'cert', 'extcert', 'prod', 'ext', 'proddr', 'extdr']
    files = []
    print("Looping through regions: " + str(regions))
    for r in regions:
        print("  Loop: " + str(r))
        dest_filename = f'aqua_report_{r}.xlsx'
        a = Aqua(login, password, r)
        containers = a.getRunningContainers()
        images = a.getRegisteredImages()
        containers = a.addNamespace(containers, images)
        containers = a.removeDuplicateImages(containers)
        containers = a.addBaseImage(containers)
        containers = a.addVulnsToImage(containers)
        print("    Aqua generating report")
        report = a.generateContainerStats(containers)
        a.generateContainerReport(report, dest_filename)
        files.append(dest_filename)

    # Email generated reports
    dest_filename = 'aqua_running_report.xlsx'
    mergexlsx(files, dest_filename)

    # Send running report to vulnerability management
    if os.environ.get("SEND_TO_APPS") is None:

        # Get Catalog scans from Prod
        images = []
        dest_image_filename = 'aqua_catalog_report.xlsx'
        a = Aqua(login, password, 'prod')
        images = a.getRegisteredImages()
        images = a.addVulnsToImage(images)
        images = a.getCatalogImages(images)
        ireport = a.generateImageStats(images)
        a.generateImageReport(ireport, dest_image_filename)

        # Email daily report
        subject = f"AQS Running Vulnerability Report {str(regions)}"
        body = f"Please see attached for vulnerabilities reported by Aqua on {date.today()}. All report files should be accessible at https://gitlab.mtb.com/Platforms/openshift/aqs-vuln-report/-/jobs/" + os.environ.get("CI_JOB_ID") + "/artifacts/browse for 30 days."
        toAddr = ["dl-kubernetes@prod.mtb.com", "gpassalacqua@mtb.com", "jshay1@mtb.com", "tburns2@mtb.com", "vulnerabilitymanagement@mtb.com", "jbrechtel@mtb.com", "kmaass@mtb.com"]
        fromAddr = "dl-kubernetes@prod.mtb.com"
        CC = []
        email_files = [dest_filename]
        emailxlsx(email_files, subject, body, fromAddr, toAddr, CC)

    # Send running report segmented to app code TOs
    if os.environ.get("SEND_TO_APPS"):
        proj_dir = os.environ.get("CI_PROJECT_DIR")
        app_codes = get_app_codes(dest_filename)
        for app_code in app_codes:
            print("Working on App Code Report for: ", app_code)
            segmented_report = segment_app_code_from_report(dest_filename, app_code)
            subject = f"OpenShift report for {app_code}"
            body = f""
            with open(proj_dir + "/TO_email_body.html", "r") as f:
                body += f"{f.read()}".format(date=date.today(), app_code=app_code)
            toAddr = get_app_code_to_mail(app_code).split(",")
            fromAddr = "dl-kubernetes@prod.mtb.com"
            CC = get_app_code_ts_mails(app_code).split(",")
            email_files = [segmented_report]
            emailxlsx(email_files, subject, body, fromAddr, toAddr, CC)

    # Disabled so that files can be uploaded as artifacts
    #cleanxlsx()

    sys.exit()

main()





-------------------------------------

fromAddr: dl-kubernetes@prod.mtb.com
    toAddr: ['gforce@wilmingtontrust.com']
    cc: ['BNigam@WilmingtonTrust.com', ' jlin@wilmingtontrust.com']
Working on App Code Report for:  lda
Traceback (most recent call last):
  File "/builds/Platforms/openshift/aqs-vuln-report/app.py", line 397, in <module>
    main()
  File "/builds/Platforms/openshift/aqs-vuln-report/app.py", line 387, in main
    toAddr = get_app_code_to_mail(app_code).split(",")
  File "/builds/Platforms/openshift/aqs-vuln-report/app.py", line 311, in get_app_code_to_mail
    return info["result"][0]["toemail"]
IndexError: list index out of range
Cleaning up project directory and file based variables
00:01
ERROR: Job failed: command terminated with exit code 1









Emailing
    filenames: ['aqua_running_report_fil.xlsx']
    subject: OpenShift report for fil
    body: <html>
        <i>This automated report is for understanding your app code's security standing.<br>
			This report will be generated every first and third Monday of the month.
            Please contact dl-kubernetes@prod.mtb.com for any suggestions or concerns.</i><br><br>
        Please see attached for your app code's OpenShift status as reported by Aqua on 2024-10-09 for app code fil.<br><br>
        <b>Report fields</b>:<br>
	<table cellspacing=10>
		<tr>
			<td >Namespace</td> <td>--</td> <td>Project name of the container.</td>
		</tr>
		<tr>
			<td>Region</td> <td>--</td> <td> The environment that the container is being hosted on.</td>
		</tr>
		<tr>
			<td>Container</td> <td>--</td> <td> The specific image and tag used for the container being hosted.</td>
		</tr>
		<tr>
			<td>Base Image</td> <td>--</td> <td> The image that the container builds on top of.</td>
		</tr>
		<tr>
			<td>Vulnerability</td> <td>--</td> <td>The classification of the vulnerability.</td>
		</tr>
		<tr>
			<td>Date Found</td> <td>--</td> <td>When Aqua found the vulnerability.</td>
		</tr>
		<tr>
			<td>Publish Date</td> <td>--</td> <td>When the vulnerability was published.</td>
		</tr>
		<tr>
			<td>Modification Date</td> <td>--</td> <td>If the vulnerability changed, when it was updated after it was published.</td>
		</tr>
		<tr>
			<td>Compliant</td> <td>--</td> <td>If Aqua determines the image is non-compliant then it will be blocked during deployment.</td>
		</tr>
	</table>
</html>
    fromAddr: dl-kubernetes@prod.mtb.com
    toAddr: ['dlenda@mtb.com']
    cc: ['ckirton@mtb.com', ' kward1@mtb.com', ' dpowe1@mtb.com', ' critchie2@mtb.com']
Traceback (most recent call last):
  File "/builds/Platforms/openshift/aqs-vuln-report/app.py", line 289, in emailxlsx
    mail.sendmail(fromAddr, toAddr, message.as_string())
  File "/usr/lib64/python3.6/email/message.py", line 158, in as_string
    g.flatten(self, unixfrom=unixfrom)
  File "/usr/lib64/python3.6/email/generator.py", line 118, in flatten
    self._write(msg)
  File "/usr/lib64/python3.6/email/generator.py", line 197, in _write
    self._write_headers(msg)
  File "/usr/lib64/python3.6/email/generator.py", line 224, in _write_headers
    folded = self.policy.fold(h, v)
  File "/usr/lib64/python3.6/email/_policybase.py", line 334, in fold
    return self._fold(name, value, sanitize=True)
  File "/usr/lib64/python3.6/email/_policybase.py", line 377, in _fold
    parts.append(h.encode(linesep=self.linesep, maxlinelen=maxlinelen))
AttributeError: 'list' object has no attribute 'encode'
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "/builds/Platforms/openshift/aqs-vuln-report/app.py", line 397, in <module>
    main()
  File "/builds/Platforms/openshift/aqs-vuln-report/app.py", line 391, in main
    emailxlsx(email_files, subject, body, fromAddr, toAddr, CC)
  File "/builds/Platforms/openshift/aqs-vuln-report/app.py", line 290, in emailxlsx
    except SMTPException as e:
NameError: name 'SMTPException' is not defined
Cleaning up project directory and file based variables
00:01
ERROR: Job failed: command terminated with exit code 1

def emailxlsx(filenames, subject, body, fromAddr, toAddr, CC):
    print("Emailing")
    print("    filenames: " + str(filenames))
    print("    subject: " + str(subject))
    print("    body: " + str(body))
    print("    fromAddr: " + str(fromAddr))
    print("    toAddr: " + str(toAddr))
    print("    cc: " + str(CC))
    # Create a multipart message and set headers
    message = MIMEMultipart()
    message["From"] = fromAddr
    message["To"] = ', '.join(toAddr)
    message["Subject"] = subject
    message["CC"] = CC

    # Add body to email
    message.attach(MIMEText(body, "html"))
    for filename in filenames:
        attachment = MIMEApplication(open(filename, 'rb').read())
        attachment.add_header('Content-Disposition', 'attachment', filename=filename)
        message.attach(attachment)

    try:
        mail = smtplib.SMTP('vmwsmtp.mandtbank.com', 25)
        mail.sendmail(fromAddr, toAddr, message.as_string())
    except SMTPException as e:
        print(f'There was a problem sending the mail: {e}')
        sys.exit(1)

    mail.quit()


